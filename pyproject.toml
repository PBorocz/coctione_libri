[tool.poetry]
name = "Coctione Libri"
version = "0.1.0"
description = ""
authors = ["Peter Borocz <680893+PBorocz@users.noreply.github.com>"]
readme = "README.md"
# packages = [{include = "10"}]

[tool.poetry.dependencies]
python = "^3.11"
flask = "^3.0.0"
flask-htmx = "^0.3.2"
flask-login = "^0.6.3"
pydantic = "^2.5.3"
python-dotenv = "^1.0.0"
secure = "^0.3.0"
rich = "^13.7.0"
mongoengine = "^0.27.0"

# Using fork here https://github.com/idoshr/flask-mongoengine since regular mongoengine isn't being maintained anymore.
# More context: https://stackoverflow.com/questions/76570896/importerror-cannot-import-name-jsonencoder-from-flask-json
flask-mongoengine = {git = "https://github.com/idoshr/flask-mongoengine.git"}
wtforms = "^3.1.2"
flask-wtf = "^1.2.1"
email-validator = "^2.1.0.post1"
gunicorn = "^21.2.0"
dynaconf = "^3.2.4"
flask-debugtoolbar = "^0.14.1"
tomli-w = "^1.0.0"

[tool.poetry.group.dev.dependencies]
flask-debugtoolbar-mongo = "^0.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# ##############################################################################
# Ruff world!
# ##############################################################################
[tool.ruff]
target-version = "py311"
line-length = 120
ignore = [
  "D100",    # Ok, I hate the 'Missing docstring in public module'   message, sue me!
  "D102",    # Ok, I hate the 'Missing docstring in public method'   "
  "D101",    # Ok, I hate the 'Missing docstring in public class'    "
  "D103",    # Ok, I hate the 'Missing docstring in public function' "
  "D104",    # Ok, I hate the 'Missing docstring in public package'  "
  "D105",    # Ok, I hate the 'Missing docstring in magic method'    "
  "D107",    # Ok, I hate the 'Missing docstring in __init__ method' "
  "D211",    # Get rid of conflict with D203
  "D213",    # Get rid of conflict with D212 (leaving D212 active.)
  "E402",    # Get rid of message about imports not being at the top (need for flask blueprints)
  "F401",    # Allows for imports without use (e.g. __init__.py)
  "RUF012",  # Something to do with default values on bunnet class variables not being typed.
  "COM812",  # OBO of ruff format but not sure where this is an issue.
]
select = [
  # Which Ruff suites are we running?
  # (presented in order from the Ruff documentation page)
  "F",                          # Pyflakes
  "E", "W",                     # Pycodestyle (Errors and Warnings respectively)
  "C90",                        # Mccabe
  "I",                          # Isort
  "D",                          # Pydocstyle
  "UP",                         # pyupgrade
  "N",                          # pep8-naming
  "YTT",                        # flake8-2020
  # "ANN",                      # flake8-annotations (ie. type annotations!)
  # "S",                        # flake8-bandit
  # "BLE",                      # flake8-blind-except
  # "FBT",                      # flake8-boolean-trap
  "B",                          # flake8-bugbear
  # "A",                        # flake8-builtins (NO! We use "id" as an attribute, sue me...)
  "C4",                         # flake8-comprehensions
  "T10",                        # flake8-debugger
  # "EM",                       # flake8-errmsg
  # "ISC",                      # flake8-implicit-str-concat
  # "ICN",                      # flake8-import-conventions
  # "T20",                      # flake8-print (NO! Removes all print statements!!)
  # "PT",                       # flake8-pytest-style
  "Q",                          # flake8-quotes
  # "RET",                      # flake8-return
  # "SIM",                      # flake8-simplify
  # "TID",                      # flake8-tidy-imports
  # "ARG",                      # flake8-unused-arguments
  # "DTZ",                      # flake8-datetimez
  # "ERA",                      # eradicate
  # "PD",                       # pandas-vet
  # "PGH",                      # pygrep-hooks
  "PLC", "PLE", "PLR", "PLW",   # pylint
  # "PIE",                      # flake8-pie
  "COM",                        # flake8-commas
  "RUF",                        # Ruff-specific rules
]

[tool.ruff.mccabe]
max-complexity = 12

[tool.ruff.per-file-ignores]
"config.py" = [
  "N802",  # We want all Config properties to be uppercase (even if from a methoc)
  "N805",  # We have classmethods defined that use 'cls' as arg, not 'self'!
]

# ##############################################################################
# PoeThePoet
# ##############################################################################
[tool.poe]
verbosity = 2

[tool.poe.tasks]
import = "python ./app/cli/import_from_raindrop.py"
dynaconf_list = "dynaconf -i config.settings list"
build_css = "sass app/static/css/sass/styles.scss app/static/css/coctione_libri.css"
sass_watch = "sass --watch app/static/css/sass/styles.scss app/static/css/coctione_libri.css"

################################################################################
# Import
################################################################################
# This doesn't work! For some reason, complains at trying to import tomli_w.
# Even though the first command *does* work!...arghh
[tool.poe.tasks.import_recipes_development]
interpreter = "fish"
shell = """
  python -c "import tomli_w"
  python ./app/cli/import_from_raindrop.py -d development -a import_existing_pdfs
  # python ./app/cli/import_from_raindrop.py -d development -a import_new_pdfs
"""

################################################################################
# Local servers..
################################################################################
[tool.poe.tasks.dev_run_local]
interpreter = "fish"
shell = """
  set -x FLASK_ENV "development"
  # sass app/static/css/sass/styles.scss app/static/css/coctione_libri.css
  flask run --debug --host localhost --port 5001
"""

################################################################################
# Backups!
################################################################################
[tool.poe.tasks.backup_local]
interpreter = "fish"
shell = """
  echo "Doing dump from local database..."
  mkdir -p ./__dumps__/working
  mongodump --db=coctione_libri_development --out=./__dumps__/working

  echo "Compressing to single backup file..."
  set backup_filename (date +"backup_local_%Y%m%dT%H%M.tar.gz")
  tar -czf ./__dumps__/$backup_filename ./__dumps__/working
  rm                                    ./__dumps__/working
  """

[tool.poe.tasks.backup_production]
interpreter = "fish"
shell = """
  mkdir -p ./__dumps__/working
  if not set -q mongodb; or not string length -q $mongodb
      echo "Sorry, environment variable: 'mongodb' is either not set or is empty...please check .envrc!"
      exit 1
  end
  echo "Doing dump from PRODUCTION database..."
  mongodump --db=coctione_libri --out=./__dumps__/working --uri=$mongodb
  echo "Compressing to single backup file..."
  set backup_filename (date +"backup_production_%Y%m%dT%H%M.tar.gz")
  tar -czf ./__dumps__/$backup_filename ./__dumps__/working
  rm                                    ./__dumps__/working
"""

################################################################################
# Restore
################################################################################
[tool.poe.tasks.restore]
interpreter = "fish"
args = ["db_from", "db_to", "backup_directory_path"]
shell = """
  # Example: poe restore --db_from coctione_libri --db_to coctione_libri_development --backup_directory_path ./__dumps__/workin  # mkdir -p ./__dumps__/working
  # tar -xzf {$backup_directory_path} -C ./__dumps__/working
  echo Restoring from {$backup_directory_path}/{$db_from} into {$db_to}.
  mongorestore --nsInclude={$db_from}.\\* --nsFrom={$db_from}.\\* --nsTo={$db_to}.\\* ./__dumps__/working
  """
